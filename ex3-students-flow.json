{
	"info": {
		"_postman_id": "698548d9-981f-456f-8409-882d96fa6bbf",
		"name": "Calculator Exercise 3 - Students Flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16700889"
	},
	"item": [
		{
			"name": "EX 3 Students Flow",
			"item": [
				{
					"name": "Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "stack size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Initial Stack size should be 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/size",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"size"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push 2 arguments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"total arguemnts in stack should be 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"arguments\": [2,-3]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/arguments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"arguments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Perform Calculation ABS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"result should be 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/operate?operation=ABS",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"operate"
							],
							"query": [
								{
									"key": "operation",
									"value": "ABS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "stack size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Initial Stack size should be 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/size",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"size"
							]
						}
					},
					"response": []
				},
				{
					"name": "Perform Calculation POW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"stack does not have enough arguments\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMessage).to.contain(\"It requires 2 arguments and the stack has only 1 arguments\");    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/operate?operation=POW",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"operate"
							],
							"query": [
								{
									"key": "operation",
									"value": "POW"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Push 1 arguments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"total arguemnts in stack should be 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"arguments\": [5]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/arguments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"arguments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Perform Calculation POW",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"result should be 25\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(25);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/operate?operation=POW",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"operate"
							],
							"query": [
								{
									"key": "operation",
									"value": "POW"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete arguments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"not enough arguments to delete\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.errorMessage).to.contain(\"cannot remove 1 from the stack. It has only 0 arguments\");    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/stack/arguments?count=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"stack",
								"arguments"
							],
							"query": [
								{
									"key": "count",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Independent Calculator: ADD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"result should be 6\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result).to.eql(6);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"arguments\": [4,2],\r\n    \"operation\": \"Plus\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/calculator/independent/calculate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"independent",
								"calculate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch INDEPENDENT History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"It should have only 1 INDEPENDENT execution\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.result.length).to.eql(1);    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:{{port}}/calculator/history?flavor=INDEPENDENT",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"calculator",
								"history"
							],
							"query": [
								{
									"key": "flavor",
									"value": "INDEPENDENT"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}